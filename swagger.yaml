swagger: '2.0'
info:
  description: >-
    This contains the specification of the notification service in the Electric
    Cars Charging System.
  version: "0.1.0"
  title: Notification Service
  contact:
    email: diogodanielsoaresferreira@ua.pt
host: notifications.ecarscharging.com
basePath: /api/v0.1
tags:
  - name: notification
    description: Send and list notifications
  - name: user
    description: Operations about user management
paths:
  /notifications:
    get:
      tags:
        - notification
      summary: List notifications
      description: List notifications sent to users
      operationId: listNotifications
      produces:
        - application/json
      parameters:
        - name: start_date
          in: query
          description: Start date of the fetched messages
          required: false
          type: string
          format: date-time
        - name: end_date
          in: query
          description: End date of the fetched messages
          required: false
          type: string
          format: date-time
        - name: user_id
          in: query
          description: ID of the users that receive the message
          required: false
          type: array
          items:
            type: integer
      responses:
        '200':
          description: Successfull operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Notification'
        '400':
          description: invalid query parameters
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  details:
                    type: object
                    example: "Bad Request"
        
    post:
      tags:
        - notification
      summary: Send notification to a user
      description: Send notification to a user
      operationId: sendNotification
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: >-
            Message of the notification. Set a service to true if you want to
            send a notification to that service. By default, notifications only
            go to the app. If a service is set to true and the user does not have that service enabled,
            it will return a 422 error.
          required: true
          schema:
            $ref: '#/definitions/Notification'
      responses:
        '201':
          description: Message sent successfully
          schema:
            $ref: '#/definitions/Notification'
        '422':
          description: user not found; field can't be blank; user does not have *service* notifications active
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  user_id:
                    type: array
                    items:
                      type: string
                      example: "User does not exist"
  '/notifications/{id}':
    get:
      tags:
        - notification
      summary: Get notification content
      description: Get the content of a notification
      operationId: getNotification
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the notification
          required: true
          type: integer
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Notification'
        '400':
          description: invalid id supplied
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  details:
                    type: object
                    example: "Bad Request"
        '404':
          description: notification not found
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  details:
                    type: object
                    example: "Not Found"
  
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create a new user in the system.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: >-
            User description. At least one field of e-mail or
            phone is required. E-mail must have an @ sign. Phone string must be composed only by numbers. It is possible to create users with the same e-mail or phone number.
            The *_enabled fields indicate if the user wants to receive notifications by that service. The *_enabled fields can only be set to true if the respective service has a contact point. By default, all fields are enabled.
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: user created successfully
          schema:
            $ref: '#/definitions/User'
        '422':
          description: at least one field between e-mail and phone cannot be empty; an enabled service must have a point of contact
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  email:
                    type: array
                    items:
                      type: string
                      example: "At least one field cannot be blank"
                
  '/users/{id}':
    put:
      tags:
        - user
      summary: Update user
      description: Update a user profile.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the user that need to be updated
          required: true
          type: integer
        - in: body
          name: body
          description: >-
            Updated user object. At least one field must be filled. Fields not
            filled will remain the same. If you want to clear a point of contact, fill the field with null. At least one point of contact must be filled. Enabled services must have a point of contact.
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: user updated successfully
          schema:
            $ref: '#/definitions/User'
        '400':
          description: invalid id supplied
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  details:
                    type: object
                    example: "Bad Request"
        '404':
          description: user not found
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  details:
                    type: object
                    example: "Not Found"
        '422':
          description: unprocessable Entity
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  email:
                    type: array
                    items:
                      type: string
                      example: "At least one field cannot be blank"
    get:
      tags:
        - user
      summary: Get user by id
      description: Get the user information by its id.
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the user to be fetched
          required: true
          type: integer
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: invalid id supplied
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  details:
                    type: object
                    example: "Bad Request"
        '404':
          description: user not found
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  details:
                    type: object
                    example: "Not Found"
    delete:
      tags:
        - user
      summary: Delete user
      description: Delete user based on its id.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the user to be deleted
          required: true
          type: integer
      responses:
        '204':
          description: user information successfully deleted
        '400':
          description: invalid id supplied
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  details:
                    type: object
                    example: "Bad Request"
        '404':
          description: user not found
          schema:
            type: object
            properties:
              errors:
                type: object
                properties:
                  details:
                    type: object
                    example: "Not Found"
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        example: 164
      email:
        type: string
        example: diogodanielsoaresferreira@ua.pt
      phone:
        type: string
        example: "808300700"
      api_key:
        type: string
        example: "A6B39F8132"
      inserted_at:
        type: string
        format: date-time
        readOnly: true
      updated_at:
        type: string
        format: date-time
        readOnly: true
      app_enabled:
        type: boolean
        default: true
      sms_enabled:
        type: boolean
        default: true
      email_enabled:
        type: boolean
        default: true
  Notification:
    type: object
    required:
      - content
      - userID
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
        example: 193
      timestamp:
        type: string
        format: date-time
        readOnly: true
      title:
        type: string
        example: "Notification title"
      content:
        type: string
        example: Your car has stopped its charging.
      user_id:
        type: integer
        format: int64
        example: 5673
      app:
        type: boolean
        default: true
      sms:
        type: boolean
        default: false
      email:
        type: boolean
        default: false
